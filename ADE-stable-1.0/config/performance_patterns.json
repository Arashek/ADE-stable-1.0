{
    "cpu": [
        {
            "name": "nested_loop",
            "description": "Deeply nested loops causing CPU bottlenecks",
            "regex": "(?:for|while)\\s+[^:]+:\\s*[^\\n]*\\n(?:[^\\n]*\\n)*?(?:for|while)\\s+[^:]+:\\s*[^\\n]*\\n(?:[^\\n]*\\n)*?(?:for|while)\\s+[^:]+:",
            "suggestion": "Consider using vectorized operations, list comprehensions, or parallel processing",
            "severity": "high",
            "impact": "high",
            "metrics": {
                "complexity": "O(nÂ³)",
                "optimization_potential": "high"
            },
            "confidence": 0.9,
            "metadata": {
                "category": "algorithm",
                "optimization_type": "vectorization"
            }
        },
        {
            "name": "repeated_calculation",
            "description": "Repeated calculations that could be cached",
            "regex": "\\w+\\s*=\\s*\\w+\\s*\\*\\s*\\w+\\s*\\n(?:[^\\n]*\\n)*?\\w+\\s*=\\s*\\w+\\s*\\*\\s*\\w+",
            "suggestion": "Cache the result of repeated calculations in a variable or use memoization",
            "severity": "medium",
            "impact": "medium",
            "metrics": {
                "redundancy": "high",
                "optimization_potential": "medium"
            },
            "confidence": 0.8,
            "metadata": {
                "category": "caching",
                "optimization_type": "memoization"
            }
        }
    ],
    "memory": [
        {
            "name": "large_list_operation",
            "description": "Operations on large lists that could be optimized",
            "regex": "\\w+\\.(?:append|extend|insert)\\s*\\([^)]+\\)\\s*\\n(?:[^\\n]*\\n){100,}",
            "suggestion": "Use generators or streaming for large data operations",
            "severity": "high",
            "impact": "high",
            "metrics": {
                "memory_usage": "high",
                "optimization_potential": "high"
            },
            "confidence": 0.9,
            "metadata": {
                "category": "data_structure",
                "optimization_type": "streaming"
            }
        },
        {
            "name": "memory_leak",
            "description": "Potential memory leak in resource handling",
            "regex": "new\\s+\\w+\\([^)]*\\)\\s*;\\s*(?!delete)",
            "suggestion": "Use context managers or ensure proper resource cleanup",
            "severity": "critical",
            "impact": "critical",
            "metrics": {
                "leak_potential": "high",
                "optimization_potential": "high"
            },
            "confidence": 0.9,
            "metadata": {
                "category": "resource_management",
                "optimization_type": "cleanup"
            }
        }
    ],
    "io": [
        {
            "name": "synchronous_io",
            "description": "Synchronous I/O operations blocking the event loop",
            "regex": "open\\([^)]+\\)|read\\([^)]+\\)|write\\([^)]+\\)",
            "suggestion": "Use async I/O operations or move to a separate thread",
            "severity": "high",
            "impact": "high",
            "metrics": {
                "blocking_time": "high",
                "optimization_potential": "high"
            },
            "confidence": 0.8,
            "metadata": {
                "category": "io",
                "optimization_type": "async"
            }
        },
        {
            "name": "small_file_operations",
            "description": "Multiple small file operations that could be batched",
            "regex": "open\\([^)]+\\)\\s*;\\s*read\\([^)]+\\)\\s*;\\s*close\\([^)]+\\)",
            "suggestion": "Batch file operations or use buffered I/O",
            "severity": "medium",
            "impact": "medium",
            "metrics": {
                "operation_count": "high",
                "optimization_potential": "medium"
            },
            "confidence": 0.8,
            "metadata": {
                "category": "io",
                "optimization_type": "batching"
            }
        }
    ],
    "algorithm": [
        {
            "name": "inefficient_search",
            "description": "Linear search in large datasets",
            "regex": "for\\s+\\w+\\s+in\\s+\\w+\\s*:\\s*if\\s+\\w+\\s*==\\s*\\w+",
            "suggestion": "Use hash tables or binary search for better performance",
            "severity": "high",
            "impact": "high",
            "metrics": {
                "complexity": "O(n)",
                "optimization_potential": "high"
            },
            "confidence": 0.8,
            "metadata": {
                "category": "search",
                "optimization_type": "data_structure"
            }
        },
        {
            "name": "redundant_comparison",
            "description": "Redundant comparisons in sorting or filtering",
            "regex": "sorted\\([^)]+\\)\\s*\\n(?:[^\\n]*\\n)*?filter\\([^)]+\\)",
            "suggestion": "Combine sorting and filtering operations",
            "severity": "medium",
            "impact": "medium",
            "metrics": {
                "redundancy": "medium",
                "optimization_potential": "medium"
            },
            "confidence": 0.7,
            "metadata": {
                "category": "algorithm",
                "optimization_type": "combination"
            }
        }
    ],
    "database": [
        {
            "name": "n_plus_one_query",
            "description": "N+1 query problem in database operations",
            "regex": "for\\s+[^:]+:\\s*[^\\n]*\\n\\s*\\w+\\.query\\([^)]+\\)",
            "suggestion": "Use eager loading or batch queries to reduce database calls",
            "severity": "high",
            "impact": "high",
            "metrics": {
                "query_count": "high",
                "optimization_potential": "high"
            },
            "confidence": 0.9,
            "metadata": {
                "category": "database",
                "optimization_type": "eager_loading"
            }
        },
        {
            "name": "missing_index",
            "description": "Missing database index on frequently queried columns",
            "regex": "WHERE\\s+[^=]+\\s*=|[^=]+\\s*=\\s*[^=]+\\s+ORDER BY",
            "suggestion": "Add appropriate database indexes for frequently queried columns",
            "severity": "medium",
            "impact": "medium",
            "metrics": {
                "query_performance": "low",
                "optimization_potential": "high"
            },
            "confidence": 0.8,
            "metadata": {
                "category": "database",
                "optimization_type": "indexing"
            }
        }
    ]
} 