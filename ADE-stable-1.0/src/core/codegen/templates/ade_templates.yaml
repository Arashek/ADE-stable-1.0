ade:
  templates:
    codegen:
      name: "ADE Code Generator Template"
      description: "Template for ADE code generation with performance optimizations"
      content: |
        import { CodeGenerator } from '@ade/core';
        import { TemplateManager } from './template_manager';
        import { LanguageGenerator } from './language_generator';
        import { SuggestionEngine } from './suggestion_engine';

        export class {{generator_name}}Generator extends CodeGenerator {
            private templateManager: TemplateManager;
            private languageGenerator: LanguageGenerator;
            private suggestionEngine: SuggestionEngine;

            constructor(config: GeneratorConfig) {
                super(config);
                this.templateManager = new TemplateManager();
                this.languageGenerator = new LanguageGenerator();
                this.suggestionEngine = new SuggestionEngine();
            }

            async generateCode(context: GenerationContext): Promise<GeneratedCode> {
                const template = await this.templateManager.getTemplate(context.templateName);
                const suggestions = await this.suggestionEngine.getSuggestions(context);
                const languageConfig = this.languageGenerator.getConfig(context.language);

                return {
                    code: await this._applyTemplate(template, context, suggestions),
                    metadata: {
                        language: context.language,
                        framework: context.framework,
                        dependencies: languageConfig.dependencies,
                        patterns: suggestions.patterns
                    }
                };
            }

            private async _applyTemplate(
                template: Template,
                context: GenerationContext,
                suggestions: CodeSuggestions
            ): Promise<string> {
                // Apply template with performance optimizations
                const result = await this._processTemplate(template, {
                    ...context,
                    suggestions
                });

                return this._optimizeCode(result);
            }

            private async _optimizeCode(code: string): Promise<string> {
                // Apply code optimizations
                return code;
            }
        }

    analyzer:
      name: "ADE Code Analyzer Template"
      description: "Template for ADE code analysis with performance optimizations"
      content: |
        import { CodeAnalyzer } from '@ade/core';
        import { QualityAnalyzer } from './quality_analyzer';
        import { SecurityAnalyzer } from './security_analyzer';
        import { PerformanceAnalyzer } from './performance_analyzer';

        export class {{analyzer_name}}Analyzer extends CodeAnalyzer {
            private qualityAnalyzer: QualityAnalyzer;
            private securityAnalyzer: SecurityAnalyzer;
            private performanceAnalyzer: PerformanceAnalyzer;

            constructor(config: AnalyzerConfig) {
                super(config);
                this.qualityAnalyzer = new QualityAnalyzer();
                this.securityAnalyzer = new SecurityAnalyzer();
                this.performanceAnalyzer = new PerformanceAnalyzer();
            }

            async analyzeCode(code: string, context: AnalysisContext): Promise<AnalysisResult> {
                const [quality, security, performance] = await Promise.all([
                    this.qualityAnalyzer.analyze(code, context),
                    this.securityAnalyzer.analyze(code, context),
                    this.performanceAnalyzer.analyze(code, context)
                ]);

                return {
                    quality,
                    security,
                    performance,
                    suggestions: this._generateSuggestions(quality, security, performance)
                };
            }

            private _generateSuggestions(
                quality: QualityMetrics,
                security: SecurityMetrics,
                performance: PerformanceMetrics
            ): Suggestion[] {
                return [
                    ...this._getQualitySuggestions(quality),
                    ...this._getSecuritySuggestions(security),
                    ...this._getPerformanceSuggestions(performance)
                ];
            }
        }

    optimizer:
      name: "ADE Code Optimizer Template"
      description: "Template for ADE code optimization with performance focus"
      content: |
        import { CodeOptimizer } from '@ade/core';
        import { ASTOptimizer } from './ast_optimizer';
        import { MemoryOptimizer } from './memory_optimizer';
        import { RuntimeOptimizer } from './runtime_optimizer';

        export class {{optimizer_name}}Optimizer extends CodeOptimizer {
            private astOptimizer: ASTOptimizer;
            private memoryOptimizer: MemoryOptimizer;
            private runtimeOptimizer: RuntimeOptimizer;

            constructor(config: OptimizerConfig) {
                super(config);
                this.astOptimizer = new ASTOptimizer();
                this.memoryOptimizer = new MemoryOptimizer();
                this.runtimeOptimizer = new RuntimeOptimizer();
            }

            async optimizeCode(code: string, context: OptimizationContext): Promise<OptimizedCode> {
                const ast = await this._parseCode(code);
                const optimizedAst = await this.astOptimizer.optimize(ast);
                
                const memoryOptimized = await this.memoryOptimizer.optimize(optimizedAst);
                const runtimeOptimized = await this.runtimeOptimizer.optimize(memoryOptimized);

                return {
                    code: await this._generateCode(runtimeOptimized),
                    metrics: await this._calculateMetrics(runtimeOptimized)
                };
            }

            private async _calculateMetrics(ast: AST): Promise<OptimizationMetrics> {
                return {
                    memoryUsage: this._calculateMemoryUsage(ast),
                    runtimePerformance: this._calculateRuntimePerformance(ast),
                    codeSize: this._calculateCodeSize(ast)
                };
            }
        }

    validator:
      name: "ADE Code Validator Template"
      description: "Template for ADE code validation with performance checks"
      content: |
        import { CodeValidator } from '@ade/core';
        import { SyntaxValidator } from './syntax_validator';
        import { TypeValidator } from './type_validator';
        import { PerformanceValidator } from './performance_validator';

        export class {{validator_name}}Validator extends CodeValidator {
            private syntaxValidator: SyntaxValidator;
            private typeValidator: TypeValidator;
            private performanceValidator: PerformanceValidator;

            constructor(config: ValidatorConfig) {
                super(config);
                this.syntaxValidator = new SyntaxValidator();
                this.typeValidator = new TypeValidator();
                this.performanceValidator = new PerformanceValidator();
            }

            async validateCode(code: string, context: ValidationContext): Promise<ValidationResult> {
                const [syntax, types, performance] = await Promise.all([
                    this.syntaxValidator.validate(code),
                    this.typeValidator.validate(code),
                    this.performanceValidator.validate(code)
                ]);

                return {
                    isValid: syntax.isValid && types.isValid && performance.isValid,
                    errors: [
                        ...syntax.errors,
                        ...types.errors,
                        ...performance.errors
                    ],
                    warnings: [
                        ...syntax.warnings,
                        ...types.warnings,
                        ...performance.warnings
                    ]
                };
            }
        } 