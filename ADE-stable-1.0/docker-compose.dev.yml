version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./projects:/app/projects
      - D:/ade-data/mongodb:/data/db
      - D:/ade-data/redis:/data
      - D:/ade-data/logs:/app/logs
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_RELOAD=True
      - MONGODB_URI=mongodb://admin:adminpassword@mongodb:27017
      - MONGODB_USER=admin
      - MONGODB_PASSWORD=adminpassword
      - MONGODB_DATABASE=ade
      - REDIS_PASSWORD=devredispassword
      - JWT_SECRET=dev-secret-key
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
    depends_on:
      - mongodb
      - redis
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - api
    command: npm run dev

  model-trainer:
    build:
      context: ./model-training
      dockerfile: Dockerfile.dev
    volumes:
      - ./model-training:/app
      - ./projects:/app/projects
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - DEBUG=1
      - MONGODB_URI=mongodb://admin:adminpassword@mongodb:27017
      - REDIS_PASSWORD=devredispassword
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
    ports:
      - "5000:5000"
      - "5678:5678"  # Debug port for Python
    depends_on:
      - api
      - mongodb
      - redis
    command: python -m debugpy --listen 0.0.0.0:5678 -m flask run --host=0.0.0.0

  metrics-visualizer:
    build:
      context: ./model-training
      dockerfile: Dockerfile.dev
    volumes:
      - ./model-training:/app
      - ./output:/app/output
    environment:
      - PYTHONPATH=/app
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - DEBUG=1
    ports:
      - "8080:8080"
    depends_on:
      - model-trainer
    command: python -m src.refactoring.metrics_visualizer

  mongodb:
    image: mongo:latest
    volumes:
      - D:/ade-data/mongodb:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
    ports:
      - "27017:27017"

  redis:
    image: redis:latest
    volumes:
      - D:/ade-data/redis:/data
    command: redis-server --requirepass devredispassword
    ports:
      - "6379:6379"

  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - mongodb

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres

  postgres:
    image: postgres:13-alpine
    environment:
      - POSTGRES_USER=ade_user
      - POSTGRES_PASSWORD=ade_password
      - POSTGRES_DB=ade_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - portainer_data:/data
    command: -H unix:///var/run/docker.sock

volumes:
  mongodb_data:
  prometheus_data:
  grafana_data:
  postgres_data:
  elasticsearch_data:
  portainer_data: 