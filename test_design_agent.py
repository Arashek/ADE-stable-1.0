"""
ADE Design Agent Test Script
This script tests the design agent functionality of the ADE platform
"""

import os
import sys
import json
import time
from pathlib import Path
import random

class DesignAgent:
    """Simulates the Design Agent functionality"""
    
    def __init__(self):
        """Initialize the Design Agent"""
        self.designs_dir = "designs"
        os.makedirs(self.designs_dir, exist_ok=True)
        print("Design Agent initialized")
    
    def generate_design(self, requirements):
        """Generate a design based on requirements"""
        print(f"Generating design based on requirements: {requirements}")
        
        # Simulate thinking time
        print("Analyzing requirements...")
        time.sleep(1)
        print("Generating components...")
        time.sleep(1)
        print("Applying design patterns...")
        time.sleep(1)
        
        # Generate a unique ID for the design
        design_id = f"design-{int(time.time())}"
        
        # Create a basic design structure
        design = {
            "id": design_id,
            "name": requirements.get("name", "Generated Design"),
            "description": requirements.get("description", "A design generated by the Design Agent"),
            "components": [],
            "styles": [],
            "pages": [],
            "theme": {
                "palette": {
                    "primary": "#1976d2",
                    "secondary": "#dc004e",
                    "background": "#f5f5f5",
                    "text": "#333333"
                },
                "typography": {
                    "fontFamily": "Roboto, sans-serif",
                    "fontSize": 16
                }
            },
            "version": "1.0.0"
        }
        
        # Generate components based on requirements
        if "components" in requirements:
            for comp_type in requirements["components"]:
                self._add_component(design, comp_type)
        else:
            # Add some default components
            self._add_component(design, "header")
            self._add_component(design, "form")
            self._add_component(design, "footer")
        
        # Generate styles
        self._generate_styles(design)
        
        # Generate pages
        self._generate_pages(design)
        
        # Save the design
        self._save_design(design)
        
        return design
    
    def _add_component(self, design, comp_type):
        """Add a component to the design"""
        component_id = f"{comp_type}{len(design['components']) + 1}"
        
        if comp_type == "button":
            component = {
                "id": component_id,
                "type": "button",
                "props": {
                    "text": "Click Me",
                    "variant": "contained",
                    "color": "primary"
                }
            }
        elif comp_type == "textfield":
            component = {
                "id": component_id,
                "type": "textfield",
                "props": {
                    "label": "Input Field",
                    "placeholder": "Enter text here"
                }
            }
        elif comp_type == "header":
            component = {
                "id": component_id,
                "type": "header",
                "props": {
                    "title": design["name"],
                    "showLogo": True
                }
            }
        elif comp_type == "footer":
            component = {
                "id": component_id,
                "type": "footer",
                "props": {
                    "copyright": f" {time.strftime('%Y')} {design['name']}",
                    "links": ["Home", "About", "Contact"]
                }
            }
        elif comp_type == "form":
            component = {
                "id": component_id,
                "type": "form",
                "props": {
                    "fields": [
                        {"type": "textfield", "label": "Name", "required": True},
                        {"type": "textfield", "label": "Email", "required": True},
                        {"type": "textarea", "label": "Message", "required": False}
                    ],
                    "submitButton": {
                        "text": "Submit",
                        "color": "primary"
                    }
                }
            }
        else:
            # Generic component
            component = {
                "id": component_id,
                "type": comp_type,
                "props": {
                    "label": comp_type.capitalize()
                }
            }
        
        design["components"].append(component)
    
    def _generate_styles(self, design):
        """Generate styles for the design"""
        # Add a primary button style
        design["styles"].append({
            "id": "primary-button",
            "name": "Primary Button",
            "properties": {
                "backgroundColor": design["theme"]["palette"]["primary"],
                "color": "#ffffff",
                "borderRadius": "4px",
                "padding": "8px 16px"
            }
        })
        
        # Add a secondary button style
        design["styles"].append({
            "id": "secondary-button",
            "name": "Secondary Button",
            "properties": {
                "backgroundColor": design["theme"]["palette"]["secondary"],
                "color": "#ffffff",
                "borderRadius": "4px",
                "padding": "8px 16px"
            }
        })
        
        # Add a card style
        design["styles"].append({
            "id": "card",
            "name": "Card",
            "properties": {
                "backgroundColor": "#ffffff",
                "borderRadius": "8px",
                "boxShadow": "0 2px 4px rgba(0,0,0,0.1)",
                "padding": "16px"
            }
        })
    
    def _generate_pages(self, design):
        """Generate pages for the design"""
        # Create a home page with all components
        component_ids = [comp["id"] for comp in design["components"]]
        design["pages"].append({
            "id": "home",
            "name": "Home",
            "components": component_ids
        })
        
        # If there are enough components, create additional pages
        if len(component_ids) >= 3:
            # Create an about page with some components
            about_components = random.sample(component_ids, min(3, len(component_ids)))
            design["pages"].append({
                "id": "about",
                "name": "About",
                "components": about_components
            })
    
    def _save_design(self, design):
        """Save a design to a JSON file"""
        file_path = os.path.join(self.designs_dir, f"{design['id']}.json")
        with open(file_path, 'w') as f:
            json.dump(design, f, indent=2)
        
        print(f"Design saved to {file_path}")
        return file_path
    
    def generate_code(self, design):
        """Generate React code from a design"""
        print(f"Generating code for design: {design['name']}")
        
        # Simulate thinking time
        print("Analyzing design structure...")
        time.sleep(1)
        print("Generating component code...")
        time.sleep(1)
        
        # Generate imports
        code = """import React from 'react';
import { 
  Button, 
  TextField, 
  Box, 
  Typography, 
  Container,
  AppBar,
  Toolbar,
  Card,
  CardContent,
  Grid,
  Link
} from '@mui/material';

"""
        
        # Generate component
        component_name = design['name'].replace(' ', '')
        code += f"const {component_name} = () => {{\n"
        
        # Add state for form components if needed
        has_form = any(comp["type"] == "form" for comp in design["components"])
        if has_form:
            code += "  const [formData, setFormData] = React.useState({});\n\n"
            code += "  const handleChange = (e) => {\n"
            code += "    setFormData({ ...formData, [e.target.name]: e.target.value });\n"
            code += "  };\n\n"
            code += "  const handleSubmit = (e) => {\n"
            code += "    e.preventDefault();\n"
            code += "    console.log('Form submitted:', formData);\n"
            code += "    // Add your form submission logic here\n"
            code += "  };\n\n"
        
        # Start the return statement
        code += "  return (\n"
        code += "    <Container maxWidth=\"lg\">\n"
        
        # Add components based on their types
        for component in design["components"]:
            if component["type"] == "header":
                code += "      <AppBar position=\"static\" sx={{ mb: 4 }}>\n"
                code += "        <Toolbar>\n"
                code += f"          <Typography variant=\"h6\">{component['props']['title']}</Typography>\n"
                code += "        </Toolbar>\n"
                code += "      </AppBar>\n"
            
            elif component["type"] == "form":
                code += "      <Card sx={{ mb: 4 }}>\n"
                code += "        <CardContent>\n"
                code += "          <Typography variant=\"h5\" gutterBottom>Contact Form</Typography>\n"
                code += "          <form onSubmit={handleSubmit}>\n"
                code += "            <Grid container spacing={2}>\n"
                
                for field in component["props"]["fields"]:
                    code += "              <Grid item xs={12}>\n"
                    if field["type"] == "textarea":
                        code += f"                <TextField\n"
                        code += f"                  label=\"{field['label']}\"\n"
                        code += f"                  name=\"{field['label'].lower()}\"\n"
                        code += f"                  multiline\n"
                        code += f"                  rows={4}\n"
                        code += f"                  fullWidth\n"
                        code += f"                  required={field.get('required', False)}\n"
                        code += f"                  onChange={{handleChange}}\n"
                        code += f"                />\n"
                    else:
                        code += f"                <TextField\n"
                        code += f"                  label=\"{field['label']}\"\n"
                        code += f"                  name=\"{field['label'].lower()}\"\n"
                        code += f"                  fullWidth\n"
                        code += f"                  required={field.get('required', False)}\n"
                        code += f"                  onChange={{handleChange}}\n"
                        code += f"                />\n"
                    code += "              </Grid>\n"
                
                code += "              <Grid item xs={12}>\n"
                code += f"                <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n"
                code += f"                  {component['props']['submitButton']['text']}\n"
                code += f"                </Button>\n"
                code += "              </Grid>\n"
                code += "            </Grid>\n"
                code += "          </form>\n"
                code += "        </CardContent>\n"
                code += "      </Card>\n"
            
            elif component["type"] == "footer":
                code += "      <Box component=\"footer\" sx={{ mt: 4, py: 3, borderTop: '1px solid #eaeaea' }}>\n"
                code += "        <Grid container justifyContent=\"space-between\">\n"
                code += "          <Grid item>\n"
                code += f"            <Typography variant=\"body2\">{component['props']['copyright']}</Typography>\n"
                code += "          </Grid>\n"
                code += "          <Grid item>\n"
                
                for link in component["props"]["links"]:
                    code += f"            <Link href=\"#\" sx={{ mx: 1 }}>{link}</Link>\n"
                
                code += "          </Grid>\n"
                code += "        </Grid>\n"
                code += "      </Box>\n"
            
            elif component["type"] == "button":
                code += f"      <Button variant=\"{component['props'].get('variant', 'contained')}\" color=\"{component['props'].get('color', 'primary')}\" sx={{ m: 1 }}>\n"
                code += f"        {component['props'].get('text', 'Button')}\n"
                code += "      </Button>\n"
            
            elif component["type"] == "textfield":
                code += f"      <TextField label=\"{component['props'].get('label', '')}\" placeholder=\"{component['props'].get('placeholder', '')}\" fullWidth sx={{ m: 1 }} />\n"
        
        # Close the return statement
        code += "    </Container>\n"
        code += "  );\n"
        code += "};\n\n"
        code += f"export default {component_name};\n"
        
        # Save the generated code
        code_path = os.path.join(self.designs_dir, f"{component_name}.jsx")
        with open(code_path, 'w') as f:
            f.write(code)
        
        print(f"Code generated and saved to {code_path}")
        return code

def main():
    """Main function"""
    print("ADE Design Agent Test")
    print("=" * 50)
    
    # Initialize the Design Agent
    agent = DesignAgent()
    
    # Define design requirements
    requirements = {
        "name": "Contact Page",
        "description": "A contact page with a form and company information",
        "components": ["header", "form", "footer"]
    }
    
    # Generate a design
    design = agent.generate_design(requirements)
    
    # Generate code from the design
    code = agent.generate_code(design)
    
    print("\nTest completed successfully!")

if __name__ == "__main__":
    main()
