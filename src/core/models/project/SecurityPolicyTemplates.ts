import { SecurityPolicy } from './SecurityManager';

export interface SecurityPolicyTemplate {
  id: string;
  name: string;
  description: string;
  policy: SecurityPolicy;
  useCases: string[];
  remediationSteps: string[];
}

export class SecurityPolicyTemplates {
  static readonly templates: SecurityPolicyTemplate[] = [
    {
      id: 'web-application',
      name: 'Web Application Template',
      description: 'Secure configuration for web applications',
      useCases: ['Web servers', 'API services', 'Frontend applications'],
      policy: {
        userNamespace: true,
        readOnlyRootfs: true,
        noNewPrivileges: true,
        privileged: false,
        ulimits: {
          nofile: 1024,
          nproc: 1024,
          memlock: 65536,
          stack: 8192,
          cpu: 0,
          as: 0,
        },
        capabilities: {
          add: [],
          drop: [
            'ALL',
            'NET_ADMIN',
            'SYS_ADMIN',
            'MKNOD',
            'SETUID',
            'SETGID',
            'SYS_CHROOT',
            'SYS_MODULE',
            'SYS_RESOURCE',
            'SYS_TIME',
            'SYS_TTY_CONFIG',
            'NET_BROADCAST',
            'NET_RAW',
            'IPC_LOCK',
            'IPC_OWNER',
            'SYS_PTRACE',
            'SYS_PACCT',
            'SYS_BOOT',
            'LEASE',
            'WAKE_ALARM',
            'BLOCK_SUSPEND',
            'AUDIT_READ',
            'AUDIT_WRITE',
            'AUDIT_CONTROL',
            'SETFCAP',
            'MAC_OVERRIDE',
            'MAC_ADMIN',
            'SYSLOG',
            'CHOWN',
            'DAC_OVERRIDE',
            'DAC_READ_SEARCH',
            'FOWNER',
            'FSETID',
            'KILL',
            'SETGID',
            'SETUID',
            'NET_BIND_SERVICE',
            'SYS_CHROOT',
            'SETFCAP',
            'MKNOD',
            'AUDIT_WRITE',
          ],
        },
        securityOpts: [
          'no-new-privileges:true',
          'seccomp=unconfined',
          'apparmor=unconfined',
          'no-sandbox',
          'no-allow-sandbox-escape',
        ],
        networkMode: 'bridge',
        exposedPorts: ['80:80', '443:443'],
        allowedIPs: [],
        dnsPolicy: 'default',
        dnsSearch: [],
        readOnlyPaths: ['/proc', '/sys', '/boot', '/etc'],
        writablePaths: ['/tmp', '/var/tmp', '/workspace'],
        allowedCommands: ['nginx', 'node', 'python', 'java'],
        seccompProfile: 'default',
        apparmorProfile: 'default',
        oomKillDisable: false,
        pidsLimit: 0,
        memorySwappiness: -1,
        memorySwap: -1,
        cgroupParent: '',
        healthCheck: {
          test: ['CMD', 'curl', '-f', 'http://localhost/'],
          interval: 300000,
          timeout: 30000,
          retries: 3,
          startPeriod: 0,
        },
      },
      remediationSteps: [
        'Ensure all dependencies are up to date',
        'Configure proper logging and monitoring',
        'Set up rate limiting for API endpoints',
        'Implement proper authentication and authorization',
        'Use HTTPS for all communications',
        'Regularly scan for vulnerabilities',
        'Implement proper error handling',
        'Set up proper backup and recovery procedures',
      ],
    },
    {
      id: 'database',
      name: 'Database Template',
      description: 'Secure configuration for database containers',
      useCases: ['SQL databases', 'NoSQL databases', 'Cache servers'],
      policy: {
        userNamespace: true,
        readOnlyRootfs: true,
        noNewPrivileges: true,
        privileged: false,
        ulimits: {
          nofile: 65536,
          nproc: 2048,
          memlock: 65536,
          stack: 8192,
          cpu: 0,
          as: 0,
        },
        capabilities: {
          add: [],
          drop: [
            'ALL',
            'NET_ADMIN',
            'SYS_ADMIN',
            'MKNOD',
            'SETUID',
            'SETGID',
            'SYS_CHROOT',
            'SYS_MODULE',
            'SYS_RESOURCE',
            'SYS_TIME',
            'SYS_TTY_CONFIG',
            'NET_BROADCAST',
            'NET_RAW',
            'IPC_LOCK',
            'IPC_OWNER',
            'SYS_PTRACE',
            'SYS_PACCT',
            'SYS_BOOT',
            'LEASE',
            'WAKE_ALARM',
            'BLOCK_SUSPEND',
            'AUDIT_READ',
            'AUDIT_WRITE',
            'AUDIT_CONTROL',
            'SETFCAP',
            'MAC_OVERRIDE',
            'MAC_ADMIN',
            'SYSLOG',
            'CHOWN',
            'DAC_OVERRIDE',
            'DAC_READ_SEARCH',
            'FOWNER',
            'FSETID',
            'KILL',
            'SETGID',
            'SETUID',
            'NET_BIND_SERVICE',
            'SYS_CHROOT',
            'SETFCAP',
            'MKNOD',
            'AUDIT_WRITE',
          ],
        },
        securityOpts: [
          'no-new-privileges:true',
          'seccomp=unconfined',
          'apparmor=unconfined',
          'no-sandbox',
          'no-allow-sandbox-escape',
        ],
        networkMode: 'bridge',
        exposedPorts: ['3306:3306', '5432:5432', '6379:6379'],
        allowedIPs: [],
        dnsPolicy: 'default',
        dnsSearch: [],
        readOnlyPaths: ['/proc', '/sys', '/boot', '/etc'],
        writablePaths: ['/tmp', '/var/tmp', '/data', '/var/lib'],
        allowedCommands: ['mysql', 'postgres', 'redis-server', 'mongod'],
        seccompProfile: 'default',
        apparmorProfile: 'default',
        oomKillDisable: false,
        pidsLimit: 0,
        memorySwappiness: -1,
        memorySwap: -1,
        cgroupParent: '',
        healthCheck: {
          test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost'],
          interval: 300000,
          timeout: 30000,
          retries: 3,
          startPeriod: 0,
        },
      },
      remediationSteps: [
        'Implement proper authentication and authorization',
        'Configure proper backup procedures',
        'Set up monitoring and alerting',
        'Implement proper logging',
        'Regularly update database software',
        'Configure proper network access controls',
        'Implement proper data encryption',
        'Set up proper backup and recovery procedures',
      ],
    },
    {
      id: 'development',
      name: 'Development Environment Template',
      description: 'Secure configuration for development environments',
      useCases: ['Development containers', 'CI/CD environments', 'Testing environments'],
      policy: {
        userNamespace: true,
        readOnlyRootfs: false,
        noNewPrivileges: true,
        privileged: false,
        ulimits: {
          nofile: 65536,
          nproc: 2048,
          memlock: 65536,
          stack: 8192,
          cpu: 0,
          as: 0,
        },
        capabilities: {
          add: ['SYS_PTRACE'],
          drop: [
            'ALL',
            'NET_ADMIN',
            'SYS_ADMIN',
            'MKNOD',
            'SETUID',
            'SETGID',
            'SYS_CHROOT',
            'SYS_MODULE',
            'SYS_RESOURCE',
            'SYS_TIME',
            'SYS_TTY_CONFIG',
            'NET_BROADCAST',
            'NET_RAW',
            'IPC_LOCK',
            'IPC_OWNER',
            'SYS_PACCT',
            'SYS_BOOT',
            'LEASE',
            'WAKE_ALARM',
            'BLOCK_SUSPEND',
            'AUDIT_READ',
            'AUDIT_WRITE',
            'AUDIT_CONTROL',
            'SETFCAP',
            'MAC_OVERRIDE',
            'MAC_ADMIN',
            'SYSLOG',
            'CHOWN',
            'DAC_OVERRIDE',
            'DAC_READ_SEARCH',
            'FOWNER',
            'FSETID',
            'KILL',
            'SETGID',
            'SETUID',
            'NET_BIND_SERVICE',
            'SYS_CHROOT',
            'SETFCAP',
            'MKNOD',
            'AUDIT_WRITE',
          ],
        },
        securityOpts: [
          'no-new-privileges:true',
          'seccomp=unconfined',
          'apparmor=unconfined',
          'no-sandbox',
          'no-allow-sandbox-escape',
        ],
        networkMode: 'bridge',
        exposedPorts: ['3000:3000', '8080:8080', '9229:9229'],
        allowedIPs: [],
        dnsPolicy: 'default',
        dnsSearch: [],
        readOnlyPaths: ['/proc', '/sys', '/boot', '/etc'],
        writablePaths: ['/tmp', '/var/tmp', '/workspace', '/home'],
        allowedCommands: ['npm', 'yarn', 'python', 'node', 'git', 'gcc', 'make'],
        seccompProfile: 'default',
        apparmorProfile: 'default',
        oomKillDisable: false,
        pidsLimit: 0,
        memorySwappiness: -1,
        memorySwap: -1,
        cgroupParent: '',
        healthCheck: {
          test: ['CMD', 'node', '--version'],
          interval: 300000,
          timeout: 30000,
          retries: 3,
          startPeriod: 0,
        },
      },
      remediationSteps: [
        'Regularly update development tools and dependencies',
        'Implement proper source code version control',
        'Set up proper testing procedures',
        'Configure proper logging and debugging',
        'Implement proper code review processes',
        'Set up proper CI/CD pipelines',
        'Configure proper development environment isolation',
        'Implement proper development workflow security',
      ],
    },
  ];

  static getTemplate(id: string): SecurityPolicyTemplate | undefined {
    return this.templates.find(template => template.id === id);
  }

  static getTemplatesByUseCase(useCase: string): SecurityPolicyTemplate[] {
    return this.templates.filter(template => 
      template.useCases.some(uc => uc.toLowerCase().includes(useCase.toLowerCase()))
    );
  }

  static getAllTemplates(): SecurityPolicyTemplate[] {
    return this.templates;
  }
} 