{
    "class": [
        {
            "name": "data_model",
            "description": "Data model class documentation",
            "regex": "class\\s+\\w+\\s*\\([^)]*\\)\\s*:",
            "template": {
                "description": "A data model class representing {class_name}",
                "parameters": [
                    {
                        "name": "attributes",
                        "type": "dict",
                        "description": "Class attributes and their types"
                    }
                ],
                "examples": [
                    "model = {class_name}(attributes={...})",
                    "model.validate()"
                ],
                "references": [
                    "Related models",
                    "Database schemas",
                    "API endpoints"
                ]
            },
            "confidence": 0.9,
            "metadata": {
                "category": "data_model",
                "framework": "pydantic"
            }
        },
        {
            "name": "service_class",
            "description": "Service class documentation",
            "regex": "class\\s+\\w+Service\\s*\\([^)]*\\)\\s*:",
            "template": {
                "description": "Service class handling {class_name} operations",
                "parameters": [
                    {
                        "name": "dependencies",
                        "type": "list",
                        "description": "Service dependencies and their purposes"
                    }
                ],
                "examples": [
                    "service = {class_name}Service(dependencies=[...])",
                    "result = await service.process()"
                ],
                "references": [
                    "Dependent services",
                    "Configuration",
                    "Error handling"
                ]
            },
            "confidence": 0.9,
            "metadata": {
                "category": "service",
                "framework": "fastapi"
            }
        }
    ],
    "function": [
        {
            "name": "api_endpoint",
            "description": "API endpoint function documentation",
            "regex": "@(?:app|router)\\.(?:get|post|put|delete)\\s*\\(",
            "template": {
                "description": "API endpoint for {endpoint_name}",
                "parameters": [
                    {
                        "name": "request",
                        "type": "Request",
                        "description": "HTTP request object"
                    },
                    {
                        "name": "response",
                        "type": "Response",
                        "description": "HTTP response object"
                    }
                ],
                "returns": "Response data in JSON format",
                "examples": [
                    "response = await endpoint(request)",
                    "data = response.json()"
                ],
                "references": [
                    "Request schema",
                    "Response schema",
                    "Error codes"
                ]
            },
            "confidence": 0.9,
            "metadata": {
                "category": "api",
                "framework": "fastapi"
            }
        },
        {
            "name": "database_query",
            "description": "Database query function documentation",
            "regex": "async\\s+def\\s+\\w+\\s*\\([^)]*db[^)]*\\)\\s*:",
            "template": {
                "description": "Database query function for {query_name}",
                "parameters": [
                    {
                        "name": "db",
                        "type": "Database",
                        "description": "Database connection"
                    },
                    {
                        "name": "query_params",
                        "type": "dict",
                        "description": "Query parameters"
                    }
                ],
                "returns": "Query results",
                "examples": [
                    "results = await query_database(db, params)",
                    "processed = process_results(results)"
                ],
                "references": [
                    "Database schema",
                    "Query optimization",
                    "Error handling"
                ]
            },
            "confidence": 0.9,
            "metadata": {
                "category": "database",
                "framework": "sqlalchemy"
            }
        }
    ],
    "module": [
        {
            "name": "main_module",
            "description": "Main module documentation",
            "regex": "if\\s+__name__\\s*==\\s*['\"]__main__['\"]",
            "template": {
                "description": "Main module for {module_name}",
                "parameters": [],
                "examples": [
                    "python {module_name}.py",
                    "import {module_name}"
                ],
                "references": [
                    "Configuration",
                    "Dependencies",
                    "Usage guide"
                ]
            },
            "confidence": 0.8,
            "metadata": {
                "category": "main",
                "type": "script"
            }
        },
        {
            "name": "utility_module",
            "description": "Utility module documentation",
            "regex": "from\\s+\\w+\\s+import\\s+\\w+",
            "template": {
                "description": "Utility module providing {module_name} functionality",
                "parameters": [],
                "examples": [
                    "from {module_name} import utility_function",
                    "result = utility_function()"
                ],
                "references": [
                    "Utility functions",
                    "Constants",
                    "Helper classes"
                ]
            },
            "confidence": 0.8,
            "metadata": {
                "category": "utility",
                "type": "module"
            }
        }
    ]
} 