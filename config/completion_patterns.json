{
    "function": [
        {
            "name": "http_handler",
            "description": "HTTP request handler function",
            "regex": "def\\s+\\w+\\s*\\([^)]*request[^)]*\\)\\s*:",
            "completion": """async def handle_request(request):
    try:
        # Parse request data
        data = await request.json()
        
        # Process request
        result = await process_data(data)
        
        # Return response
        return {
            "status": "success",
            "data": result
        }
    except Exception as e:
        logger.error(f"Error handling request: {e}")
        return {
            "status": "error",
            "message": str(e)
        }""",
            "confidence": 0.9,
            "metadata": {
                "type": "web",
                "framework": "fastapi"
            }
        },
        {
            "name": "database_query",
            "description": "Database query function",
            "regex": "def\\s+\\w+\\s*\\([^)]*db[^)]*\\)\\s*:",
            "completion": """async def query_database(db, query_params):
    try:
        # Build query
        query = build_query(query_params)
        
        # Execute query
        result = await db.execute(query)
        
        # Process results
        processed_result = process_results(result)
        
        return processed_result
    except Exception as e:
        logger.error(f"Database query error: {e}")
        raise""",
            "confidence": 0.9,
            "metadata": {
                "type": "database",
                "framework": "sqlalchemy"
            }
        }
    ],
    "block": [
        {
            "name": "error_handling",
            "description": "Error handling block",
            "regex": "try:",
            "completion": """try:
    # Your code here
    result = process_data()
except ValueError as e:
    logger.error(f"Invalid data: {e}")
    raise
except Exception as e:
    logger.error(f"Unexpected error: {e}")
    raise""",
            "confidence": 0.9,
            "metadata": {
                "type": "error_handling"
            }
        },
        {
            "name": "async_context",
            "description": "Async context manager",
            "regex": "async\\s+with",
            "completion": """async with async_context() as ctx:
    # Your code here
    result = await ctx.process()
    return result""",
            "confidence": 0.9,
            "metadata": {
                "type": "async"
            }
        }
    ],
    "snippet": [
        {
            "name": "logging",
            "description": "Logging statement",
            "regex": "logger\\.",
            "completion": """logger.info("Operation completed successfully", extra={
    "operation": "process_data",
    "status": "success"
})""",
            "confidence": 0.8,
            "metadata": {
                "type": "logging"
            }
        },
        {
            "name": "validation",
            "description": "Data validation",
            "regex": "if\\s+not\\s+\\w+\\s+is\\s+None",
            "completion": """if not data is None:
    if not isinstance(data, dict):
        raise ValueError("Data must be a dictionary")
    if "required_field" not in data:
        raise ValueError("Missing required field")""",
            "confidence": 0.8,
            "metadata": {
                "type": "validation"
            }
        }
    ]
} 